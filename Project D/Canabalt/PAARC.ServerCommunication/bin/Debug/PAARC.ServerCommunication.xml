<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PAARC.ServerCommunication</name>
    </assembly>
    <members>
        <member name="T:PAARC.Communication.Channels.DataChannel">
            <summary>
            This is an implementation of the <c>IDataChannel</c> interface.
            </summary>
        </member>
        <member name="T:PAARC.Communication.Channels.ChannelBase">
            <summary>
            An implementation of the <c>IChannel</c> interface that is used as base class for the actual channels.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Channels.ChannelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PAARC.Communication.Channels.ChannelBase"/> class.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Channels.ChannelBase.#ctor(PAARC.Shared.ICommunicationFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:PAARC.Communication.Channels.ChannelBase"/> class using the given communication factory implementation.
            </summary>
            <param name="communicationFactory">The communication factory that is used to create the actual communication objects.</param>
        </member>
        <member name="M:PAARC.Communication.Channels.ChannelBase.ConnectAsync(System.String,System.Int32)">
            <summary>
            Starts asynchronously connecting to a remote server.
            </summary>
            <param name="remoteAddress">The remote address to connect to.</param>
            <param name="remotePort">The remote port to use.</param>
        </member>
        <member name="M:PAARC.Communication.Channels.ChannelBase.Shutdown">
            <summary>
            Shuts down the channel.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Channels.ChannelBase.OnCleaningUp">
            <summary>
            Hook for derived classes to do their own cleaning.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Channels.ChannelBase.ListenAsync(System.String,System.Int32)">
            <summary>
            Starts asynchronous listening for incoming client connections.
            </summary>
            <param name="localAddress">The local address used for the listening.</param>
            <param name="port">The port used for the listening.</param>
        </member>
        <member name="P:PAARC.Communication.Channels.ChannelBase.CommunicationFactory">
            <summary>
            Gets the communication factory that is used to create the actual communication objects.
            </summary>
        </member>
        <member name="P:PAARC.Communication.Channels.ChannelBase.Socket">
            <summary>
            Gets the TCP socket wrapper.
            </summary>
        </member>
        <member name="P:PAARC.Communication.Channels.ChannelBase.LocalEndpoint">
            <summary>
            Gets the local endpoint used for the channel.
            </summary>
        </member>
        <member name="P:PAARC.Communication.Channels.ChannelBase.IsConnected">
            <summary>
            Gets a value indicating whether the channel is connected.
            </summary>
        </member>
        <member name="E:PAARC.Communication.Channels.ChannelBase.Connected">
            <summary>
            Occurs when the channel was successfully connected to a server.
            </summary>
        </member>
        <member name="E:PAARC.Communication.Channels.ChannelBase.ConnectionClosed">
            <summary>
            Occurs when the underlying connection was closed.
            </summary>
        </member>
        <member name="E:PAARC.Communication.Channels.ChannelBase.ClientAccepted">
            <summary>
            Occurs when a client was accepted by the channel.
            </summary>
        </member>
        <member name="E:PAARC.Communication.Channels.ChannelBase.Error">
            <summary>
            Occurs in case of an error during communication.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Channels.DataChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PAARC.Communication.Channels.DataChannel"/> class.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Channels.DataChannel.#ctor(PAARC.Shared.ICommunicationFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:PAARC.Communication.Channels.DataChannel"/> class using the given communication factory.
            </summary>
            <param name="communicationFactory">The communication factory that is used to create the actual communication objects.</param>
        </member>
        <member name="M:PAARC.Communication.Channels.DataChannel.Send(PAARC.Shared.Data.IDataMessage)">
            <summary>
            Sends the specified data message to the server.
            </summary>
            <param name="data">The data message to send.</param>
        </member>
        <member name="M:PAARC.Communication.Channels.DataChannel.PurgeFromQueue(PAARC.Shared.DataType)">
            <summary>
            Purges a specific type of data messages from the send queue.
            </summary>
            <param name="dataType">The type of the data to purge from the send queue.</param>
        </member>
        <member name="E:PAARC.Communication.Channels.DataChannel.DataMessageReceived">
            <summary>
            Occurs when a data message was successfully received, on the server side.
            </summary>
        </member>
        <member name="P:PAARC.Communication.Channels.DataChannel.MinMillisecondsBetweenMessages">
            <summary>
            Gets or sets the minimum number of milliseconds between messages.
            Messages are delayed by the amount given here if necessary.
            </summary>
            <value>
            The minimum number of milliseconds between messages.
            </value>
        </member>
        <member name="T:PAARC.Communication.Helpers.EndPointHelper">
            <summary>
            Helper functions to parse string IP address data.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Helpers.EndPointHelper.ParseEndPoint(System.String,System.Int32)">
            <summary>
            Parses the given string representation of an IP address and returns a strongly typed <c>IPEndPoint</c>.
            </summary>
            <param name="address">The address to parse.</param>
            <param name="port">The port to use for the endpoint.</param>
            <returns>An <c>IPEndPoint</c> instance that contains the data passed in as arguments.</returns>
        </member>
        <member name="T:PAARC.Communication.DefaultCommunicationFactory">
            <summary>
            A default implementation of the <c>ICommunicationFactory</c> interface used for production.
            </summary>
        </member>
        <member name="M:PAARC.Communication.DefaultCommunicationFactory.CreateTcpSocket">
            <summary>
            Creates a TCP socket wrapper implementation.
            </summary>
            <returns>
            An implementation of the TCP socket wrapper interface.
            </returns>
        </member>
        <member name="M:PAARC.Communication.DefaultCommunicationFactory.CreateUdpSocket">
            <summary>
            Creates a UDP socket wrapper implementation.
            </summary>
            <returns>
            An implementation of the UDP socket wrapper interface.
            </returns>
        </member>
        <member name="M:PAARC.Communication.DefaultCommunicationFactory.CreateDataChannel">
            <summary>
            Creates a data channel implementation.
            </summary>
            <returns>
            An implementation of the data channel interface.
            </returns>
        </member>
        <member name="M:PAARC.Communication.DefaultCommunicationFactory.CreateControlChannel">
            <summary>
            Creates a control channel implementation.
            </summary>
            <returns>
            An implementation of the control channel interface.
            </returns>
        </member>
        <member name="T:PAARC.Communication.Sockets.UdpSocketWrapper">
            <summary>
            An implementation of the <c>IUdpSocketWrapper</c> interface.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Sockets.UdpSocketWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PAARC.Communication.Sockets.UdpSocketWrapper"/> class.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Sockets.UdpSocketWrapper.Initialize(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes the wrapper with a set of local and remote endpoint data.
            </summary>
            <param name="localAddress">The local address to use for receive operations.</param>
            <param name="localPort">The local port to use for receive operations.</param>
            <param name="remoteAddress">The remote address to use for send operations.</param>
            <param name="remotePort">The remote port to use for send operations.</param>
        </member>
        <member name="M:PAARC.Communication.Sockets.UdpSocketWrapper.Shutdown">
            <summary>
            Shuts down the socket and cleans up resources.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Sockets.UdpSocketWrapper.ReceiveFromAsync">
            <summary>
            Starts an asynchronous receive operation.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Sockets.UdpSocketWrapper.SendToAsync(System.Byte[])">
            <summary>
            Starts an asynchronous send operation.
            </summary>
            <param name="data">The data that should be sent.</param>
        </member>
        <member name="E:PAARC.Communication.Sockets.UdpSocketWrapper.DataSent">
            <summary>
            Occurs when data was sent successfully.
            Due to the nature of UDP, this does not mean that the data was successfully received on the other end.
            </summary>
        </member>
        <member name="E:PAARC.Communication.Sockets.UdpSocketWrapper.DataReceived">
            <summary>
            Occurs when data was received successfully.
            </summary>
        </member>
        <member name="E:PAARC.Communication.Sockets.UdpSocketWrapper.Error">
            <summary>
            Occurs in any case of network errors.
            </summary>
        </member>
        <member name="T:PAARC.Communication.Channels.ControlChannel">
            <summary>
            This is an implementation of the <c>IControlChannel</c> interface.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Channels.ControlChannel.Send(PAARC.Shared.ControlCommands.IControlCommand)">
            <summary>
            Sends the specified command to the client.
            </summary>
            <param name="command">The command to send.</param>
        </member>
        <member name="M:PAARC.Communication.Channels.ControlChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PAARC.Communication.Channels.ControlChannel"/> class.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Channels.ControlChannel.#ctor(PAARC.Shared.ICommunicationFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:PAARC.Communication.Channels.ControlChannel"/> class using the given communication factory.
            </summary>
            <param name="communicationFactory">The communication factory used to create the actual communication objects.</param>
        </member>
        <member name="E:PAARC.Communication.Channels.ControlChannel.ControlCommandSent">
            <summary>
            Occurs when a control command was successfully sent from the server to the client, on the server side.
            </summary>
        </member>
        <member name="E:PAARC.Communication.Channels.ControlChannel.ControlCommandReceived">
            <summary>
            Occurs when a control command was successfully received, on the client side.
            </summary>
        </member>
        <member name="T:PAARC.Communication.Sockets.TcpSocketWrapper">
            <summary>
            An implementation of the <c>ITcpSocketWrapper</c> interface.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Sockets.TcpSocketWrapper.ListenAsync(System.String,System.Int32)">
            <summary>
            Starts an asnychronous listen operation for incoming client connect requests.
            </summary>
            <param name="localAddress">The local address to use for the listen operation.</param>
            <param name="localPort">The local port to use for the listen operation.</param>
        </member>
        <member name="M:PAARC.Communication.Sockets.TcpSocketWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PAARC.Communication.Sockets.TcpSocketWrapper"/> class.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Sockets.TcpSocketWrapper.ConnectAsync(System.String,System.Int32)">
            <summary>
            Starts an asynchronous connect operation to connect to a remote server.
            </summary>
            <param name="remoteAddress">The remote address to connect to.</param>
            <param name="remotePort">The remote port to use during the connection attempt.</param>
        </member>
        <member name="M:PAARC.Communication.Sockets.TcpSocketWrapper.Shutdown">
            <summary>
            Shuts down the socket.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Sockets.TcpSocketWrapper.ReceiveAsync">
            <summary>
            Starts an asynchronous receive operation.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Sockets.TcpSocketWrapper.SendAsync(System.Byte[])">
            <summary>
            Starts an asynchronous send operations
            </summary>
            <param name="data">The data that should be sent.</param>
        </member>
        <member name="P:PAARC.Communication.Sockets.TcpSocketWrapper.IsConnected">
            <summary>
            Gets a value indicating whether the socket is connected.
            </summary>
            <value>
              <c>true</c> if the socket is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:PAARC.Communication.Sockets.TcpSocketWrapper.Connected">
            <summary>
            Occurs when the socket was connected successfully.
            </summary>
        </member>
        <member name="E:PAARC.Communication.Sockets.TcpSocketWrapper.ConnectionClosed">
            <summary>
            Occurs when the connection was closed successfully.
            </summary>
        </member>
        <member name="E:PAARC.Communication.Sockets.TcpSocketWrapper.ClientAccepted">
            <summary>
            Occurs when a client was accepted successfully.
            </summary>
        </member>
        <member name="E:PAARC.Communication.Sockets.TcpSocketWrapper.DataSent">
            <summary>
            Occurs when data was sent successfully.
            </summary>
        </member>
        <member name="E:PAARC.Communication.Sockets.TcpSocketWrapper.DataReceived">
            <summary>
            Occurs when data was received successfully.
            </summary>
        </member>
        <member name="E:PAARC.Communication.Sockets.TcpSocketWrapper.Error">
            <summary>
            Occurs in any case of network errors.
            </summary>
        </member>
        <member name="T:PAARC.Communication.Sockets.MulticastListener">
            <summary>
            A multicast listener implementation that allows the server side to listen for client broadcasts.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Sockets.MulticastListener.StartListening">
            <summary>
            Starts listening to incoming client broadcasts.
            </summary>
        </member>
        <member name="M:PAARC.Communication.Sockets.MulticastListener.Shutdown">
            <summary>
            Shuts down the multicast listener.
            </summary>
        </member>
        <member name="T:PAARC.Communication.PhoneControllerServer">
            <summary>
            An implementation of the phone controller server side.
            </summary>
        </member>
        <member name="M:PAARC.Communication.PhoneControllerServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PAARC.Communication.PhoneControllerServer"/> class.
            </summary>
        </member>
        <member name="M:PAARC.Communication.PhoneControllerServer.#ctor(PAARC.Shared.ICommunicationFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:PAARC.Communication.PhoneControllerServer"/> class using the given communication factory.
            </summary>
            <param name="communicationFactory">The communication factory used to create the interal communication objects.</param>
        </member>
        <member name="M:PAARC.Communication.PhoneControllerServer.Initialize(System.Net.IPAddress)">
            <summary>
            Initializes the controller with the given local IP address and starts waiting for incoming client connections.
            </summary>
            <param name="localAddress">The local IP address to use for the controller.</param>
        </member>
        <member name="M:PAARC.Communication.PhoneControllerServer.SendCommandAsync(PAARC.Shared.ControlCommands.IControlCommand)">
            <summary>
            Asynchronously sends a control command to the phone client.
            </summary>
            <param name="command">The control command to send.</param>
        </member>
        <member name="M:PAARC.Communication.PhoneControllerServer.Shutdown">
            <summary>
            Shuts down the controller. After a successful shutdown, the controller transitions to the <c>Closed</c>
            state and can be re-initialized later.
            </summary>
        </member>
        <member name="P:PAARC.Communication.PhoneControllerServer.State">
            <summary>
            Gets the current state of the phone controller.
            </summary>
        </member>
        <member name="E:PAARC.Communication.PhoneControllerServer.StateChanged">
            <summary>
            Raised when the state of the controller has changed.
            </summary>
            <remarks>
            This event is guaranteed to be raised on the synchronization context of the thread that created the controller.
            </remarks>
        </member>
        <member name="E:PAARC.Communication.PhoneControllerServer.DataMessageReceived">
            <summary>
            Raised when a data message has been received.
            </summary>
            <remarks>
            This event is guaranteed to be raised on the synchronization context of the thread that created the controller.
            </remarks>
        </member>
        <member name="E:PAARC.Communication.PhoneControllerServer.ControlCommandSent">
            <summary>
            Raised when a control command was sent successfully.
            </summary>
            <remarks>
            This event is guaranteed to be raised on the synchronization context of the thread that created the controller.
            </remarks>
        </member>
        <member name="E:PAARC.Communication.PhoneControllerServer.Error">
            <summary>
            This is a shortcut event for using the <c>StateChanged</c> event 
            and checking the <c>State</c> property for a <c>PhoneControllerState</c> of <c>Error</c>.
            In contrast to the <c>StateChanged</c> event, this event provides detailed technical
            information on the actual error that occurred.
            </summary>
            <remarks>
            This event is guaranteed to be raised on the synchronization context of the thread that created the controller.
            </remarks>
        </member>
    </members>
</doc>
